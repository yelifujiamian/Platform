<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd	
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	>

    <context:component-scan base-package="com.memory.platform.web.web.aspect" />
    
    <!--日志切面-->
    <bean id="systemLogAspect" class="com.memory.platform.web.web.aspect.SystemLogAspect"></bean> 
    
    <!-- 启动对@AspectJ注解的支持 --> 
    <!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
    <!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->
    <!--如果不写proxy-target-class="true"这句话也没问题-->
    <aop:aspectj-autoproxy proxy-target-class="true">
    	<aop:include name="systemLogAspect" />      
    </aop:aspectj-autoproxy>
    
	<!-- 只搜索@Controller 标注的类 不搜索其他标注的类 -->
	<context:component-scan base-package="com" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!-- sstdframwork的controller -->
		<context:include-filter type="regex" expression="com.memory.platform.*.web.controller" />
		<!-- 业务模块的的controller -->
		<context:include-filter type="regex" expression="com.whcd.*.web.controller" />
	</context:component-scan>
	
	<!-- controller层的属性和配置文件读入 ,多个用逗号隔开 <context:property-placeholder location="classpath:/config/others/config.properties" /> -->

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 这个配置和下面的<mvc:annotation-driven>配置重复，而第45行的配置又好像覆盖了<mvc:annotation-driven>配置，所以
		这里的property也要把objectMapper加上，不然com.memory.platform.core.springmvc.CustomObjectMapper这个里面的功能就没有-->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
		<property name="objectMapper" ref="customObjectMapper"></property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射
	 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 
	 注意此处以胶用
	 org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
	 好像最新的spring用这个无效，换成下面的才行。本版本就是：参考：http://www.oschina.net/question/140550_20454
	 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
	 该配置后感觉下面的mvc:annotation-driven 就没有作用了
	 -->
	<!-- <bean class="org.springframework.core.io.support.servlet.comm.SpringCoreCommHandlerAdapter" /> -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean class="com.memory.platform.core.springmvc.CommonWebBinding" />
		</property>
	</bean>
	
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />

	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>

	<!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
	<!-- <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/> -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- <mvc:resources mapping="/api/**" location="/api/" />
	<mvc:resources mapping="/editor/**" location="/editor/" />
	<mvc:resources mapping="/explorer/**" location="/explorer/" />
	<mvc:resources mapping="/libs/**" location="/libs/" />
	<mvc:resources mapping="/diagram-viewer/**" location="/diagram-viewer/" /> -->

	<!-- 简单的地址映射 -->
	<!-- Forwards requests to the "/" resource to the "welcome" view 
	 <mvc:view-controller path="/admin" view-name="/admin/login" /> 
	-->
	
	<!--
	<mvc:annotation-driven />
	-->
	<!-- <bean id="customObjectMapper" class="com.memory.platform.core.springmvc.CustomObjectMapper" /> -->
	
	<bean id="customObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
	     <property name="dateFormat">  
             <bean class="java.text.SimpleDateFormat">  
                 <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />  
             </bean>  
         </property>  
     </bean> 
	
	<mvc:annotation-driven>
    	<mvc:message-converters>
    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    			<property name="objectMapper" ref="customObjectMapper"></property>
    		</bean>
    	</mvc:message-converters>
    	<mvc:return-value-handlers>
            <bean class="com.memory.platform.core.springmvc.ModelViewMethodReturnValueHandler"></bean>  
        </mvc:return-value-handlers>  
    </mvc:annotation-driven>
    
	<!-- Configures support for @Controllers <mvc:annotation-driven/>相当于注册了DefaultAnnotationHandlerMapping
	和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。
	如果不用这个，则要声明下面2个bean
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
	            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
	             	<property name="supportedMediaTypes" value="application/json"/>
	            </bean>
            </list>
        </property>
    </bean>
	 -->
		<!--
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		 拦截器注册 -->
		<!-- <property name="interceptors">
			<bean class="com.company.project.common.springmvc.interceptor.SharedRenderVariableInterceptor"/>
		</property> 
	</bean>
		-->
	
	
	<!-- jsp视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<!-- 异常处理类 
	<bean id="exceptionHandler"
		class="com.memory.platform.core.exception.SpringMvcExceptionHandler" />
		-->
	<!-- 系统错误转发配置[并记录错误日志] -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 这里你可以根据需要定义N多个错误异常转发 -->
				<prop key="java.sql.SQLException">dbError</prop> <!-- 数据库错误(dbError.jsp) -->
				<prop key="org.springframework.web.bind.ServletRequestBindingException">bizError</prop> <!-- 参数绑定错误(如：必须参数没传递)(bizError.jsp) -->
				<prop key="java.lang.IllegalArgumentException">bizError</prop>  <!-- 参数错误(bizError.jsp) -->
				<prop key="org.springframework.validation.BindException">bizError</prop>  <!-- 参数类型有误(bizError.jsp) -->
				<prop key="java.lang.Throwable">system/errors/unknowError</prop>  <!-- 其他错误为'未定义错误'(system/errors/unknowError.jsp) -->
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到system/errors/fileUploadError.jsp页面 -->
				<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">system/errors/fileUploadError</prop>
			</props>
		</property>
		<property name="statusCodes"><!-- 配置多个statusCode -->
			<props>
				<prop key="system/errors/500">500</prop>  <!-- system/errors/500.jsp -->
				<prop key="system/errors/404">404</prop>  <!-- system/errors/404.jsp -->
			</props>
		</property>
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->    
        <property name="warnLogCategory" value="ERROR"></property>
		<!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 ，默认为500，系统错误-->
		<property name="defaultErrorView" value="system/errors/500"></property>
		<!-- 默认HTTP状态码 -->
		<property name="defaultStatusCode" value="404"></property>
	</bean>

	<!-- 针对类、方法级别的权限拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.memory.platform.core.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/appservice/**" />
			<bean class="com.memory.platform.web.web.interseptor.HttpInterseptor">
			    <property name="excludeUrls">
			        <list>
						<value>/appservice/live/recordCallback</value>
						<value>/appservice/live/startCallback</value>
						<value>/appservice/live/endCallback</value>
						<value>/appservice/info/chargeCallback</value>
						<value>/appservice/wx/chargeCallback</value>
					</list>
		        </property>
		    </bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- <mvc:mapping path="/fileupload" /> -->
			<mvc:mapping path="/treeMenu*" />
			<mvc:mapping path="/*" />
			<mvc:mapping path="/**" />
			<bean class="com.memory.platform.core.interceptors.LoginInterceptor">
				<property name="excludeUrls">
					<list>
						<value>/resources/**</value>
						<value>/plug-in/**</value>
						<value>/api/**</value>
						<value>/editor/**</value>
						<value>/explorer/**</value>
						<value>/libs/**</value>
						<value>/diagram-viewer/**</value>
						<value>/system/loginController/login/**</value>
						<!-- 文件查看器 -->
						<value>/fileManager/loadData/fileImageIO/**</value>
						<value>/testController/**</value>
						<value>/openservice/**</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!--开发期间注释掉，上线后启用 错误解析器 发生错误默认会跳转到/web-inf/views/timeout.jsp -->
	<!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> <property name="defaultErrorView" 
		value="timeout" /> <property name="exceptionMappings"> <props> <prop key="java.sql.SQLException">timeout</prop> <prop key="java.lang.RuntimeException">timeout</prop> 
		<prop key="org.springframework.transaction.TransactionException">timeout</prop> <prop key="org.springframework.dao.DataAccessException">timeout</prop> 
		</props> </property> </bean> -->

	<!-- 国际化,并且可以批定文件编码,可以使用classpath: 或者WEB-INF/ 前缀 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:/config/others/messages</value>
				<value>classpath:ValidationMessages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
</beans>
